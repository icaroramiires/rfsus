#include <SerialComm.h>
#include <string.h>
#ifdef __linux__
#include <stdio.h>
#include <fcntl.h>
#endif

SerialComm::SerialComm(char* porta) {
	hPorta = 0;
	this->porta = porta;
}

int SerialComm::iniciar() {
	int result = EXIT_SUCCESS;

#if _WIN32 || _WIN64
	hPorta = CreateFile(porta, GENERIC_READ | GENERIC_WRITE, 0, NULL,
			OPEN_EXISTING, 0, NULL);

	if (hPorta == INVALID_HANDLE_VALUE) {
		result = GetLastError();
	} else {
		// configura acesso aa porta
		DCB dcb;
		memset(&dcb, 0, sizeof(dcb));
		dcb.DCBlength = sizeof(dcb);
		dcb.BaudRate = CBR_9600;
		dcb.Parity = NOPARITY;
		dcb.StopBits = ONESTOPBIT;
		dcb.ByteSize = 8;

		if (!SetCommState(hPorta, &dcb)) {
			result = GetLastError();
		}
	}
#endif

#ifdef __linux__
	hPorta = open(porta, O_RDWR | O_NOCTTY | O_NDELAY);
	if (hPorta == -1) {
		result = EXIT_FAILURE;
	} else {
		fcntl(hPorta, F_SETFL, 0);
	}
#endif
	Sleep(2000);
	return result;
}

string SerialComm::ler(char* buffer, long unsigned int &bytesParaLer) {
	int result = EXIT_FAILURE;
	long unsigned int bytesLidos = 0;
#if _WIN32 | _WIN64
	ReadFile(hPorta, buffer, bytesParaLer, &bytesLidos, NULL);
#endif
#ifdef __linux__
	bytesLidos = read(hPorta, (void*) buffer, bytesParaLer);
#endif
	if (bytesLidos == bytesParaLer) {
		result = EXIT_SUCCESS;
	}
	return result;
}

void SerialComm::finalizar() {
#ifndef SEM_ARDUINO
#if _WIN32 || _WIN64
	CloseHandle(hPorta);
#endif
#endif
}
