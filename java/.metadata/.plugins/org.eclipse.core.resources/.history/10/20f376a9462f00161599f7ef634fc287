package br.edu.ifba.rfsus.bd;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import org.bson.types.ObjectId;

import com.mongodb.BasicDBList;
import com.mongodb.BasicDBObject;
import com.mongodb.DB;
import com.mongodb.DBCollection;
import com.mongodb.DBCursor;
import com.mongodb.MongoClient;
import com.mongodb.MongoClientOptions;
import com.mongodb.MongoCredential;
import com.mongodb.ServerAddress;
import com.mongodb.client.MongoDatabase;

import br.edu.ifba.rfsus.bean.Paciente;
import br.edu.ifba.rfsus.bean.Sensores;

/* Esta classe é responsavel por gerar uma instancia de conexão com banco de dados no decorrer do software */ 

public class FachadaBD {
	private static FachadaBD instancia = null;

	private String host;
	private int port;
	private String dbName;
	private String user;
	private String password;

	private FachadaBD() {} // Construtor 

	public static FachadaBD getInstancia() {
		if (instancia == null) {
			instancia = new FachadaBD();
		}
		return instancia;
	}

	public String getHost() {
		return host;
	}

	public void setHost(String host) {
		this.host = host;
	}

	public int getPort() {
		return port;
	}

	public void setPort(int port) {
		this.port = port;
	}

	public String getDbName() {
		return dbName;
	}

	public void setDbName(String dbName) {
		this.dbName = dbName;
	}

	public String getUser() {
		return user;
	}

	public void setUser(String user) {
		this.user = user;
	}

	public String getPassword() {
		return password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	public void configAll(String host, int port, String dbName, String user, String password) {
		this.setHost(host);
		this.setPort(port);
		this.setDbName(dbName);
		this.setUser(user);
		this.setPassword(password);
	}

	public MongoClient configClient() {
		ServerAddress server = new ServerAddress(host, port);
		MongoCredential credential = MongoCredential.createCredential(user, dbName, password.toCharArray());
		MongoClientOptions settings = MongoClientOptions.builder().codecRegistry(com.mongodb.MongoClient.getDefaultCodecRegistry()).build();
		MongoClient client = new MongoClient(server, Arrays.asList(credential), settings);

		return client;
	}

	public MongoDatabase configDB() {
		MongoDatabase db = this.configClient().getDatabase(dbName);
		return db;
	}
	
	/* Realiza a pesquisar de um registro na entidade paciente presente no 
	 * banco de dados compativel com o id passado como argumento
	 */
	
	public Paciente getPacienteById(String rfid) {
		System.out.println("RFID: " + rfid);
		DB db = FachadaBD.getInstancia().configClient().getDB("rfsus");

		DBCollection collection = db.getCollection("paciente");

		BasicDBObject query = new BasicDBObject("rfid", rfid);

		DBCursor cursor = collection.find(query);

		Paciente paciente = new Paciente();

		paciente.setRg((String) cursor.one().get("rg"));
		paciente.setNome((String) cursor.one().get("nome"));
		paciente.setDataNascimento((Date) cursor.one().get("data_nascimento"));
		paciente.setAltura((Double)cursor.one().get("altura")); 
		paciente.setPeso((Double)cursor.one().get("peso")); 
		paciente.setTipoSanguineo((String)cursor.one().get("tipo_sanguineo")); 
		paciente.setObservacoes((ArrayList<String>)cursor.one().get("observacao"));
		
		return paciente;
	}
	
	/*
	 * Registra um novo exame no banco de dados após a leitura dos dados
	 */
	// TODO tipo de returno do objecid() passar para a outra função
	public ObjectId gravarExame(String rfid) {
		
		DB db = FachadaBD.getInstancia().configClient().getDB("rfsus");
		DBCollection collectionExame = db.getCollection("exame");
		
		Map<String, Object> novoExame = new HashMap<String, Object>();
		
		ObjectId objectId = new ObjectId();
		
		novoExame.put("idExame", objectId);
		novoExame.put("rfid", rfid);
		novoExame.put("data", new Date());
		
		collectionExame.insert(new BasicDBObject(novoExame));	
		
		return objectId;
	}
	
	public void gravarSensoresDoExame(ObjectId exameId, ArrayList<Sensores> registroSensores) {
		DB db = FachadaBD.getInstancia().configClient().getDB("rfsus");
		DBCollection collectionBiometria = db.getCollection("biometria");
		
		BasicDBObject biometria = new BasicDBObject();
		biometria.put("idExame", exameId);
		
		BasicDBList sensores = new BasicDBList();
		for(int i = 0; i < registroSensores.size(); i++) {
			sensores.add(new BasicDBObject("bpm", registroSensores.get(i).getBpm()));
			sensores.add(new BasicDBObject("temp", registroSensores.get(i).getTemp()));
			sensores.add(new BasicDBObject("pressao_S", registroSensores.get(i).getPressaoS()));
			sensores.add(new BasicDBObject("pressao_D", registroSensores.get(i).getPressaoD()));
			sensores.add(new BasicDBObject("indice", registroSensores.get(i)));
		}
		
		biometria.put("sensores", sensores);
		collectionBiometria.insert(new BasicDBObject(biometria));
	}
}
